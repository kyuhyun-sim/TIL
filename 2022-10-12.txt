Dependency Injection
1.생성자 주입(Constructor Injection)
클래스의 생성자가 하나이고, 그 생성자로 주입받을 객체가 빈으로 등록되어 있다면 @Autowired를 생략 할 수 있다.

2.필드 주입(Field Injection)
필드에 @Autowired 어노테이션만 붙여주면 자동으로 의존성 주입된다. 
사용법이 매우 간단하기 때문에 가장 많이 접할 수 있는 방법이다. 
단점으로는 코드가 간결하지만, 외부에서 변경하기 힘들다.  또한 프레임워크에 의존적이고 객체지향적으로 좋지 않다.

maven/gradle의 차이
Maven같은경우는 스프링프로젝트에서 pom.xml이란 이름으로 쓰고,
Gradle은 스프링부트, 안드로이드에서 쓴다.
그 둘의 차이를 들자면 아무래도 gradle이 이후 나온 것이므로 gradle의 장점을 들수 있을거 같다.

Build라는 동적인 요소를 XML로 정의하기에는 어려운 부분이 많다. 설정 내용이 길어지고 가독성 떨어짐 의존관계가 복잡한 프로젝트 설정하기에는 부적절 상속구조를 이용한 멀티 모듈 구현 특정 설정을 소수의 모듈에서 공유하기 위해서는 부모 프로젝트를 생성하여 상속하게 해야한다. 
 Gradle은 그루비를 사용하기 때문에, 동적인 빌드는 Groovy 스크립트로 플러그인을 호출하거나 직접 코드를 짜면 된다. 
Configuration Injection 방식을 사용해서 공통 모듈을 상속해서 사용하는 단점을 커버했다. 
설정 주입시 프로젝트의 조건을 체크할 수 있어서 프로젝트별로 주입되는 설정을 다르게 할 수 있다.

아파치, 톰캣
아파치는 기본적으로 멀티 프로세스로 구현되어 있다. 하지만 설정에 따라 멀티 쓰레드를 같이 운용할 수 있다.
톰캣은 요청을 처리하기 위한 쓰레드 풀을 관리하고 있다. 그리고 요청이 오면 해당 쓰레드 풀에서 쓰레드를 꺼내 요청을 처리하도록 한다.

Spring Security 인증방식
Spring Security란, Spring 기반의 어플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 스프링 하위 프레임워크이다. 보안과 관련해서 체계적으로 많은 옵션을 제공해주기 때문에, 개발자 입장에서 일일이 보안 관련 로직을 작성하지 않아도 된다는 장점이있다. 
인증과 권한 부분은 Filter의 흐름에 따라 처리하고있다. 필터는 디스패쳐 서블렉으로 가기전에 적용되므로 가장 먼저 URL 요청을 받지만, 인터셉터는 디스팻쳐와 컨트롤러 사이에 위치한다는 점에서 적용 시기의 차이가 있다. 
Client (request) → Filter → DispatcherServlet → Interceptor → Controller(실제로 Interceptor가 Controller로 요청을 위임하는 것은 아님, Interceptor를 거쳐서 가는 것)