반복문
for문, for each문, while문, do while문

객체지향 언어
클래스(비유하자면 붕어빵 만드는 틀) 인스턴스(어떤 클래스로 부터 만들어진 객체를 그 클래스의 인스턴스라고 한다. 비유하자면 붕어빵) 메소드(어떤 작업을 수행하는 코드를 하나로 묶어 놓은것)
*메소드 개념 좀 어려움 다시 볼것
생성자(인스턴스가 생성될때 불리는 초기화 메소드로 new를 할때만 불리는 녀석으로 반드시 class랑 같은 이름으로 정의되어야 한다)
(생성자 예시)
//public class ConstructorEx01 {
//	public ConstructorEx01(){ //생략할시에도 이런 생성자가 보이지 않을뿐 자동으로 생성된다.
//		System.out.println("생성자 호출 성공");
//	}
//	
//	public static void main(String[] args) {
//		ConstructorEx01 ce = new ConstructorEx01(); // 인스턴스 생성 및 생성자 호출
//	}
//}
참고 블로그: https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&blogId=heartflow89&logNo=220955879645

상속
자식클래스는 부모 클래스에 정의된 필드와 메소드를 물려받는다.
 추가적으로 새로운 필드와 메소드를 덧붙여 정의하거나 부모 클래스에서 물려받은 메소드를 수정(overriding)할 수 있다.
extends로 상속받은 자식클래스는 하나의 클래스를 상속받을수 있다.

overloading
한 클래스내에서 동일한 이름의 메소드를 여러개 갖는거. 단, 매개변수의 개수나 혹은 타입이 달라야한다. 또한 return의 타입은 같아야한다.
overriding
부모의 클래스로 부터 상속받은 메소드를 똑같이 자식클래스가 정의해서 덮어씌어 없에 버리는것.

++따로 찾아본것++
자바를 배우며 계속 나오는 void 란 뭘까?
void는 리턴이 없는 메소드를 말한다. void 대신 String이 붙으면 문자를 반드시 리턴해줘야 하며, int를 붙이면 숫자를, boolean을 붙이면 진리값을 반드시 리턴해줘야 한다.
이는 void타입이 아무것도 반환하지 않는다는 말이기 때문이다.
일견 보이드가 좋아보이지만, 리턴값을 받지 못한다면 어떤 잉 때문에 예외가 발생했는지 명확하게 알기 어렵다.
다른 메소드는 모두 return값을 어떻게 할지 정의할 필요가 있지만 생성자는 필요가 없어 void를 붙이지도 않는다.

접근제어자
멤버 변수, 함수 혹은 클래스 앞에 붙어 사용되며 외부의 접근을 제한하는 용도로 사용된다.
private: 같은 클래스내에서만 접근
default(nothing): 아무것도 쓰지 않는 경우 같은 패키지 내에서만 접근가능. package private라고도 불린다.
protected: 같은 패키지 내에서, 그리고 다른 패키지의 자손 클래스에서 접근이 가능함
public: 접근제한 없음

++따로 찾아본것++
접근제어자를 설명할때 나오는 패키지. 패키지란 패키지 폴더를 말함. 패키지 폴더내에 자바 클래스등을 사용하여 패키지를 만들고, import 패키지명.자바클래스명 이런 방식으로 불러올수 있다.
서브 패키지는 패키지 폴더내 다시 패키지를 만든것. import할때 마치 경로를 집어넣듯 서브 패키지를 추가해주면 된다. import 메인패키지명.서브패키지명.자바클래스명
정확히 패키지내에 있는 클래스들을 다 불러오고 싶으면 import 패키지명.* 를 해주면 된다.

자바는 클래스를 인식할때 패키지이름까지 포함해서 실제 클래스로 인식한다.

객체지향이란 객체들간의 상호작용으 코드로 표현한것이다.
클래스 내부에 선언된 데이터가 부적절한 사용으로부터 보호해주는것이 접근 제어자의 역할. 캡슐화(encapsulation)이라고 한다.
이러한 캡슐화는 객체지향 언어인 자바를 사용하는데 있어서 매우 중요하다.

추상클래스(abstract class로 정의)
추상클래스란 추상 메소드를 선언할수 있는 클래스를 말한다.
상속받는 자식클래스 없이는 인스턴스를 생성할 수 없다.
추상 메소드는 설계만 되어 있고 구현되지 않는 것으로 자식클래스에서 모두 구현해야한다.

어려우니 다음 코딩을 참고하자
abstract class Bird{
    private int x,y,z;
    void fly(int x, int y, int z){
        prinLocation();
        System.out.println("이동합니다.");
        this.x = x;
        this.y = y;
        if(flyable(z)) {
            this.z = z;
        }else{
            System.out.println("그 높이로는 날 수 없습니다");
        }
        prinLocation();
    }

    abstract  boolean flyable(int z);
    public void prinLocation(){
        System.out.println("현재위치{" +x+","+y+","+z+"}");
    }
}

class Pigeon extends Bird{

    @Override
    boolean flyable(int z) {
        return z < 10000;
    }
}

class Peacock extends Bird{

    @Override
    boolean flyable(int z) {
        return false;
    }
}
public class Main {
    public static void main(String[] args) {
        Bird pigeon = new Pigeon();
        Bird peacock = new Peacock();
        System.out.println("--비둘기--");
        pigeon.fly(1,2,3);
        System.out.println("--공작새--");
        peacock.fly(1,2,3);
        System.out.println("--비둘기--");
        pigeon.fly(1,2,30000);

    }
}

인터페이스
객체의 특정행동의 특징을 정의한다
인터페이스는 일반적인 클래스와 달리 필드를 정의할 수 없다.

++따로 찾아본것++
implements도 extends와 같이 상속에 쓰인다.
단 implements의 경우 부모 메소드를 반드시 재정의해야 하며 여러 부모클래스를 가질수 있는 다중 상속이 가능하게 해준다.
printLocation();
        System.out.println("날아갑니다.");
        this.x = x;
        this.y = y;
        this.z = z;
        printLocation();

Flyable pigeon = new Pigeon();
        pigeon.fly(1,2,3);


class Solution {
    public int solution(int[] numbers) {
        int answer = 0;
        int oneToNine = 0;
        
        for (int i = 0; i < numbers.length(); i++){
            oneToNine += numbers[i];
        }
        answer = 45-oneToNine;
        return answer;
    }
}

++기초 알고리즘 문제 풀면서 알게된 것++
for each 문

배열이 들어간 for문을 for each문으로 바꿔줄수 있다.
ex) for(int i = 0; i < numbers.length; i++){ sum += numbers[i];}
이런식으로 변환-> for(int i : numbers){sum += numbers;}


