<body>
  <div id="example"></div>
  <script type="text/babel">
    ReactDOM.render(
      <h1>Hello, world!</h1>,
      document.getElementById('example')
    );
  </script>
</body>

리액트의 템플릿 구문을 jsx라 한다.
JSX에서는 HTML 태그를 자바스크립트 코드에 직접 넣을 수 있다.
ReactDOM.render()는 JSX를 HTML로 변환하고 지정된 DOM 노드로 렌더링하는 메소드다.

var names = ['Alice', 'Emily', 'Kate'];

ReactDOM.render(
  <div>
  {
    names.map(function (name) {
      return <div>Hello, {name}!</div>
    })
  }
  </div>,
  document.getElementById('example')
);

JSX에서 자바스크립트를 사용할 수도 있습니다. HTML 구문의 시작으로 꺾쇠 괄호'<'를 사용하고, 자바스크립트 구문의 시작으로 중괄호'{'를 사용한다.

var arr = [
  <h1>Hello world!</h1>,
  <h2>React is awesome</h2>,
];
ReactDOM.render(
  <div>{arr}</div>,
  document.getElementById('example')
);

자바스크립트 변수가 배열인 경우 JSX는 암시적으로 배열의 모든 구성원을 연결한다.

class HelloMessage extends React.Component {
  render() {
    return <h1>Hello {this.props.name}</h1>;
  }
}

ReactDOM.render(
  <HelloMessage name="John" />,
  document.getElementById('example')
);

클래스에는 속성이 있으며 this.props.[속성]을 사용하여 HelloMessage name='John'의 this.props.name이 /인 것처럼 구성 요소에 액세스할 수 있다.
클래스 이름의 첫 글자는 대문자여야 한다.
그렇지 않으면 리액트에서 오류가 발생한다.
그리고 리액트 컴포넌트에는 최상위 자식 노드가 하나만 있어야 한다.

class NotesList extends React.Component {
  render() {
    return (
      <ol>
      {
        React.Children.map(this.props.children, function (child) {
          return <li>{child}</li>;
        })
      }
      </ol>
    );
  }
}

ReactDOM.render(
  <NotesList>
    <span>hello</span>
    <span>world</span>
  </NotesList>,
  document.getElementById('example')
);

리액트는 컴포넌트의 자식 노드에 접근하기 위해 this.props.children을 사용한다.
this.props.children의 값에는 세 가지 가능성이 있는데 아래와 같다.
1. 구성 요소에 자식 노드가 없으면 값이 정의되지 않는다.
2. 단일 자식 노드인 경우 개체다.
3. 자식 노드가 여러 개인 경우 배열이다.
리액트는 this.props.children의 불투명한 데이터 구조를 처리하기 위해 React.Children 유틸리티를 제공한다.
React.Children.map은 데이터 유형이 정의 되지 않으면 객체가 생성 되지 않고 반복할 수 있다.

class MyTitle extends React.Component {
  static propTypes = {
    title: PropTypes.string.isRequired,
  }
  render() {
    return <h1> {this.props.title} </h1>;
  }
}

컴포넌트에는 리액트에서 props라고 하는 많은 특정 속성이 있으며 모든 유형이 될 수 있다.
props를 검증하는 방법이 필요합니다.
사용자가 구성 요소에 아무 것도 입력할 수 있는 자유를 원하지 않는데 이를 PropTypes라고 한다.
위의 코드에서 PropTypes는 제목이 필수이고 값이 문자열이어야 한다고 React에 알려준다.