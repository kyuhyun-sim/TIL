api는 약속이다.
어떤기능을 가진 api가 어떤주소를 가지고 있고, 메소드는 어떤 타입이며, request는 어떤 방식으로 보낼것이고, response는 어떻게 보낼것인지 백엔드와 프론트엔드가 서로 맞춰 주어야한다.
이렇게 미리 api문서로 약속을 해줘야하만 프론트와 백엔드ㅡ의 협업이 가능하다.
이때문에 api를 수정할때 역시 혼자 바꿔서는 안되고 항상 팀원들과 얘기해야 한다.

프론트엔드와 백엔드 Repository 구성은 각자 별개로 구성한다.
개발, 배포 프로세스가 다르기 때문이다.
프론트엔드는 S3, 백엔드는 EC2에 배포한다.
프론트엔드는 백엔드에게 요청을 보낼때 firebase 주소를 보내던것을 ec2ip로 바꿔주면된다.
반대로 백엔드는 CORS를 잘 열어주는게 매우 중요하다.
CORS는 허락받은 프론트엔드만 서버의 응답을 받을 수 있게 하는 것이다.
이걸 지키지 않으면 보안이 뚫릴수 있기에 연결되지 않게 서버쪽 정책으로 만들어져 있다.

aplication.properties 인식 안됨. 
찾던 중 서로의 자바 버전이 달라서 오류가 났을지도 모른다고 예상함.
자바 버전을 8에서 11로 바꿔주자 클론한 파일의 properies가 인식됨
Optional 은 List와 같은 형식이나 null값이 들어 갈 수있다.

상품의 찜하고, 해제하는 기능 구현.
처음에는 게시글에 dibsCount를 만들어 일일이 dibscount += 1이나 dibscount -= 1을 사용하여 연산할 생각이었지만 더 괜찮은 방법을 찾게 되었다.
postmapping으로 한번누르면 데이터베이스에 찜 데이터를 집어넣고, 다시 누를 경우 repository에서 fk한 postId 와 memberId가 일치하는 데이터를 찾아 없는 경우 생성하게 만들고, 발견하는 경우 삭제하게 만들어 주는것.
이럴 경우 dibsCount 칼럼을 만들어 줄 필요 없이 조회시 일치하는 데이터의 수를 jpa의 count 예약어를 통해 불러오면 된다.
