Controllr만 사용하면 한개의 클래스에 너무 많은 양의 코드가 존재해 코드 읽기도 어렵다.
현업에서 역시 코드 추가 혹은 변경 요청이 계속 생기는데 코드가 많으면 처음부터 순차적으로 봐가며 수정해야되서 시간이 오래걸린다.

절차적 프로그래밍과 객체지향 프로그래밍이 존재하는데 절차적 프로그래밍은 초기 프로그래밍 방식으로 컴퓨터가 해야할 일들을 순차적으로 나열해 놓는 코딩방식이다.
객체지향 프로그래밍은 소프트웨어의 규모가 점점 커지면서 필요성이 부각되고 있다한다.
왜냐하면 대부분의 사람들은 한번에여러가지 다른 생각을 하는데 취약하기에 하나의 객체에 하나의 의미를 부여하는 것처럼 프로그래밍하게 되었다.

추천하는 프로그래밍 방식.
처음에는 절차적 프로그래밍 말 그대로 사고의 흐름대로 짠뒤, 객체지향 프로그래밍으로 리팩토링(기능상 변경 없음. 하나의 파일에 너무 많은 코드가 들어가지 않고 역할별로 코드 분리, 그리고 코드 읽기 편하게) 한다.

Controller
클라이언트에 요청을 받고, 요청에 대한 처리는 서비스에 전담, 클라이언트에게 응답
Service
사용자의 요구사항을 처리하는 실세, 현업에는 서비스 코드가 계속 비대해져 서비스코드를 또 분리한다. DB정보가 필요할때는 Repository에게 요청한다.
Repository
DB 관리(연결, 해제, 자원관리), DB CRUD 작업 처리

DI 의존성 주입을 사용.
repository를 제외하고 서비스, 컨트롤러는 괜히 new로 레포지토리 생성자 만들지 말것.

스프링 IoC컨테이너는 빈(Bean)을 모아둔 통.

bean 선언방법
클래스위에 @Component 만 해줘도 됨.

스프링 '빈' 이름의 규칙. 모두 하나같이 클래스의 앞글자만 소문자로 변경함

@Autowired 선언하면 밑에 변수가 스프링 ioc에 있다면 빈을 끄집어내서 그 변수에 넣어준다.
스프링 4.3 이후부터는 @Autowired 생략가능.
생성자 선언이 1개일때만 생략가능

스프링 3계층 Annotation은 모두 @Component 이다.

enum은 열거타입을 선언해줄때 쓴ㄷ나.
enum의 정의에 의해 나열된 값들은 0부터 순차적으로 1씩 증가하는 값을 갖게된다.

@Enumerated(value = EnumType.STRING)//DB에 저장할때만은 enum값이 아니라 String로 저장해줘라.

*****
SpringBoot 2.7부터 H2가 ver2로 업데이트되면서 USER가 예약어로 등록됨. 
@Entity를 @Entity(name = "users")로 변경하여 테이블 이름을 USERS로 설정해주어야 함.
*****

비밀번호 암호화는 정보통신 보호법에 저촉되기에 꼭 해줘야한다.

회원별 장바구니 테이블을 만들때 회원 id = username을 저장하는 것보다, user테이블의 id를 저장하는 것이 일반 적이다.

@enableWebSecurity(debug = true) -> 콘솔창에 시큐리티 어떻게 돌아가는지 디버그 찍어줌.

