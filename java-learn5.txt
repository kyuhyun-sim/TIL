변수명.split("구분할 기준") 이 방식으로 자를수 있음
변수명.split("구분할 기준")[0] 을 붙이면 첫번째로 자른 문장이 출력됨.
\\s 는 공백을 뜻함
string 변수에 있는 String 배열을 int nums 배열에 저장하는 방법
int[] nums = Arrays.stream(strings).mapToInt(Integer::parseInt).toArray();

++따로 찾아 본것++
과제를 해결하기 위해 생성자와 메소드의 개념을 다시금 되짚어 봐야  했다.
변수는 크게 3종류가 존재한다.
먼저 인스턴스 변수는 클래스 내부에 존재하는 멤버변수 중 하나로 static가 붙어있지 않는 변수이다.
클래스 변수는 인스턴스와 마찬가지로 멤버변수로 변수 앞에 static가 붙어있다.
지역 변수는 메서드 내에서 선언되어 메서드 내에서만 사용할수 있는 변수로 메서드가 실행될때 메모리를 할당받으며, 메서드가 끝나면 소멸되어 사용할수 없게 된다.
static란 무엇인가?
static를 변수 앞에 선언해주면 정적 변수가 되는데 이는 일반 인스턴스 변수의 경우 새로운 인스턴스들이 생성될때마다 각기 다른 값을 가지므로 인스턴스 변수의 값도 각 인스터스들의 값을 가지게 되지만, static을 사용한 클래스 변수의 경우 클래스 변수에서 수정된 내용들은 어떤 인스턴스를 새로 생성해도 똑같이 수정된 상태로 불러와지게 된다.
ex)
class Number{
    static int num = 0; //클래스 필드
    int num2 = 0; //인스턴스 필드
}

public class Static_ex {
	
    public static void main(String[] args) {
    	Number number1 = new Number(); //첫번째 number
    	Number number2 = new Number(); //두번쨰 number
    	
    	number1.num++; //클래스 필드 num을 1증가시킴
    	number1.num2++; //인스턴스 필드 num을 1증가시킴
    	System.out.println(number2.num); //두번째 number의 클래스 필드 출력
    	System.out.println(number2.num2); //두번째 number의 인스턴스 필드 출력
    }
}

위 코드를 실행해보면 분며 number1 인스턴스의 number1 과 2를 1씩 증가시켰으나 전혀 다른 number2인스턴스의 static로 선언된 num1을 불러와보면 수정되 있는 것을 볼수 있다.
반대로 num2의 경우 전혀 다른 인스턴스이기에 초기값 0이 불러와진다.