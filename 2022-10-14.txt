POJO
POJO(Plain Old Java Object)는 객체 지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로 설계된 오브젝트를 말한다.
프레임워크 인터페이스, 클래스를 구현하거나 확장하지 않은 단순한 클래스로 Java에서 제공하는 API 외에 종속되지 않는다.
특정 규약과 환경에 종속되지 않아 코드가 간결하고 테스트 자동화에 유리하다.
스프링에서는 도메인과 비지니스 로직을 수행하는 대상이 POJO 대상이 될 수 있다.

Refresh Token을 사용했을 때 보안 장점
stateless라는 jwt 특성 때문이다.
만약 access token의 만료 기간을 길게 잡아 이것만 사용하게 한다면 access token이 탈취 되었을 때 서버에서 아무런 방어적인 행동을 할 수 없습니다. 더욱이 서버는 해당 token이 탈취 되었다는 사실 조차 모를 수 있다. 
그래서 클라이언트 측에 2개의 토큰을 주는 것이다..
access token을 서버에게 전송해 인가 작업이 이루어지고, refresh token은 access token을 발급할 때만 서버에 전송한다.
만약 refresh token이 탈취되어 해커가 새로운 access token을 요구해 발급받을 수 있지만, 이 발급이 진행되는 과정에서 다른 나라의 IP 주소로 요청이 들어왔다던가 또는 계정 도용으로 신고된 아이디이던가 등을 검증할 수 있는 작업을 서버에서 해 줄 수 있는 것이다. 
그러면 서버는 해커가 refresh token으로 요청한 것을 무시(거절)하고 해킹된 refresh token을 서버에서 지워버려 access token을 해커에게 발급하지 않을 수 있다.

다만, HTTP 하이재킹으로 중간에 만료 시간이 지나지 않은 access token이 탈취될 수 있다. 이 때문에 HTTPS를 반드시 기본으로 사용하여 클라이언트와 서버 간에 전송되는 데이터를 암호화하는 것이다. 

결론. 한 번 발급되면 정보가 변하지 않는 stateless라는 jwt 특성 때문에 refresh token을 사용하여 access token을 발급한다. 
refresh token이라는 방어 도구라도 있어야 서버가 해킹된 토큰에 대한 방어 행동을 취할 수 있게 된다

Autowiring 과정
컨테이너에서 타입(인터페이스 또는 오브젝트)을 이용해 의존 대상 객체를 검색하고, 할당할 수 있는 빈 객체를 찾아 주입한다.

인터페이스와 추상클래스의 차이
추상 클래스는 그 추상 클래스를 상속받아서 기능을 이용하고, 확장시키는 데 있다. 
반면에 인터페이스는 함수의 껍데기만 있는데, 그 이유는 그 함수의 구현을 강제하기 위해서 이다. 
구현을 강제함으로써 구현 객체의 같은 동작을 보장할 수 있다.

RESTful
HTTP URI를 통해 자원을 표시하고 HTTP Method를 통해 자원에 대한 처리를 표현한다. 
사람이 읽을 수 있는 API라는 것이 특징이다. 
HTTP를 사용하기 때문에 HTTP의 특성을 그대로 반영한다. 
또한 별도의 인프라 구축이 필요없다. 
단점으로는 RESTful 한 것에 대한 명확한 표준이 존재하지 않는다는 점과 RESTful을 완전히 만족하는 API를 만들기는 매우 까다롭다는 점, 그리고 REST API가 분산환경에 적합하지 않다는 점이 있다. 
모든 관련된 동작을 URI를 통해 알려주는 HAPEOAS로 동적인 API제공도 가능하다.
이를 클라이언트가 API의 변화에 일일이 대응하지 않아도 되는 장점을 갖는 방법도 있다.
