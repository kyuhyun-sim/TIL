팔로잉 알림 기능을 구현하기 위해 소켓에 대해 공부할 필요를 느꼈다.
소켓은 프로세스가 드넓은 네트워크 세계로 데이터를 내보내거나 혹은 그 세계로부터 데이터를 받기 위한 실제적인 창구 역할을 한다.
그러므로 프로세스가 데이터를 보내거나 받기 우이해서는 반드시 소켓을 열어서 소켓에 데이터를 써보내거나 소켓으로 부터 데이터를 읽어들여야 한다.

소켓은 프로토콜, ip주소, 포토 넘버로 정의된다.
우선 프로토콜 부터 알아 보았다.
프로토콜이란 통신에서 어떤 시스템이 다른 시스템과의 통신을 원활하게 수용하도록 해주는 통신 규약, 약속이다.
ip는 전 세계 컴퓨터에 부여된 고유의 식별 주소이며, 포트는 네트워크 상에서 통신하기 위해서 호스트 내부적으로 프로세스가 할당받아야 하는 고유한 숫자이다.
한 호스트내에서 네트워크 통신을 하고 있는 프로세스를 식별하기 위해 사용되는 값이기때문에 같은 호스트 내에서 서로 다른 프로세스가 같은 포트 넘버를 가질 수 없다.
즉, 같은 컴퓨터 내에 존재하는 프로그램을 식별하는 번호라고 할 수 있다.

이제 이 소켓 통신의 흐름을 지켜보자면 먼저 서버측 부터 알아보자.
서버에서의 소켓의 개요를 보자면 클라이언트 소켓의 연결 요청을 대기하고, 연결 요청이 오면 클라이언트 소켓을 생성하여 통신이 가능하게 해주는 것이다.

1) socket() 함수를 이용하여 먼저 소켓을 생성해준다.
2) bind() 함수로 ip와 port 번호를 설정해준다.
3) listen() 함수로 클라이언트의 접근 요청에 수신 대기열을 만들어 몇 개의 클라이언트를 대기 시킬지 결정한다.
4) accept() 함수를 사용하여 클라이언트와의 연결을 기다린다.
5) send(), /recv() 함수를 사용하여 클라이언트와 데이터를 주고 받는다.
6) close() 함수를 사용하여 소켓을 닫아준다.

여기까지가 서버쪽의 소켓 코드의 전체적인 틀이다.

클라이언트의 경우 개요를 살펴보자면 실제로 데이터의 송수신이 일어나는 곳이라 할수 있겠다.
순서는 다음과 같다.

1)socket()함수로 가장 먼저 소켓을 연다.
2)connect() 함수를 이용하여 통신 할 서버의 설정된 ip와 port 번호에 통신을 시도한다.
3)통신을 시도 시, 서버가 accept() 함수를 이용하여 클라이언트의 socket descriptor를 반환한다.
4) 이를 통해 클라이언트와 서버가 서로 읽고 쓰기를 하며 통시을 반복한다.
5) close()를 통해 소켓을 닫는다.

우리가 기존까지 사용하던 HTTP 통신과 SOCKET 통신의 차이점은 HTTP의 경우 클라이언트에 요청이 있을때만 서버가 응답하여 해당 정보를  전송하고 곧바로 연결을 종료하는 방식이라면, SOCKET 통신의 경우 서버와 클라이언트가 특정 포트를 통해 실시간으로 양방향 통신을 하는 방식을 말한다.