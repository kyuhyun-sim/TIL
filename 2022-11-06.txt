리코일?

브라우저의 화면 변경
클릭할때 배경색은 하얀색에서 회새으로 변경하거나 클릭바를 좌우로 이동시키는 등의 기능들을 사용해야 할때 상태를 가져올 필요가 있다.

 

리액트에서의 화면 변경
리액트에서는 가상돔을 이용해 변경된 상태를 파악해서 이전과 다르게 변경된 상태를 화면에서 다시 그려주게 된다.(렌더링)

변경된 곳만 다시 화면을 그려주면 화면 전체가 깜박이는 것을 없애주어서 사용자 경험을 향상시켜준다.

또 화면 전체를 다시 그릴 때보다 더 적은 브라우저의 자원을 활용하기 때문에 빠르고 쾌적한 사용자 경험을 제공한다.


상태 관리 라이브러리(리덕스)
리액트의 상태를 이용해 화면의 변화를 줄 수 있지만 프로젝트가 커질수록 만드어야 할 상태거 점점 증가하기에 이를 체계적으로 관리하기 위해 리덕스가 탄생하였다.

이후 대부분의 개발자들은 리액트를 사용하면서 상태관리를 별도의 라이브러리를 이용해 관리하기 시작했다.

다양한 라이브러리 중 가장 많은 비중을 차지하는 라이브러리는 Redux이다.

이 리덕스에 대해 간단한 개념을 설명하자면 상태가 변경되면 액션을 통해서 리듀서에 전달되고 리듀서에서 상태를 변경해 스토어에저장된다.

이 스토어에서 상태가 변경되면 해당 상태를 구독하고 있는 컴포넌트에 변경된 상태를 전달해준다.

 

상태 관리 라이브러리(리코일)
리덕스는 단방향 흐름은 상태를 디버깅하기 쉽게 해주지만 액션, 리듀서, 셀렉터, 스토어를 초기에 세팅하는 것이 엄청나게 번거로운 일이었고, 많은 코드를 추가하도록 강제하게 만들었다.

이런 리덕스의 단점이 부각되면서 대체 라이브러리로 대두되기 시작한것이 리코일이다.

 

리코일 역시 리액트를 위한 상태 관리 라이브러리로 api, 의미, 동작을 최대한 리액트스럽게 유지하면서 이를 개선하고자 만들어졌다.

페이스북에서 만든 리액트에서는 리덕스,Mobx처럼 상태 관리를 도와주는 기능이 없었다.

Context API가 있긴 하지만 페이스북에서는 Context API를 이용해 상태를 관리하는 방식은 어렵다고 판단했다.

 

Context API를 사용해서 상태 관리를 하면 부분적인 상태 변경이 어려워진다.

별도의 Provider를 이용해 랜더링을 제어할려고 해도 자식 요소들 전체가 다시 랜더링해야 하고 의도치 않은 커플링이 생기는 문제가 생긴다.

반면 Redux와 Mobx의 기능적인 문제는 없다.

그렇지만 이 상태 관리 라이브러리들은 리액트의 내부 라이브러리가 아니기 때문에 리액트의 가상돔의 내부 로직과는 별개로 동작한다.

Redux의 store은 리액트의 상태와는 별개의 것이기 때문에 우리는 수많은 코드를 통해서 리액트의 상태와 리덕스의 상태를 일치시키는 작업을 해야 했다.

하지만 리코일은 hook처럼 리액트의 상태를 간단하게 변경하고 이용 가능하다.

 

리코일은 atom이라는 상태를 store 없이 전역으로 관리할 수 있다.
atom은 구독, 옵저버와 같은 개념을 생각할 필요없이 hook을 사용하듯이 사용하면 된다.
hook를 사용했던 개발자라면 쉽게 사용할 수 있다.
selector를 이용하면 리듀서 없이 복잡한 연산도 간단하게 할 수 있다.