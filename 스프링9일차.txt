현업 개발 플로우
요구사항 분석 -> 설계 -> 구현(프로그래밍) -> 테스트 -> 유지보수
프론트엔드와 협업을 위해 공통으로 사용하는 api부터 설계한다.

repository, controller, service 없이도 servlet를 이용한다면 스프링 서버 구현이 가능하다. 
하지만 servlet보다 위 3개를 주로 쓰는 이유는 controller가 servlet에서 HTTP request, respose 처리를 위해 매번 작성해 줘야 하는 중복 코드들을 생략 가능해 간편하기 때문이다.
또한 api 이름마다 파일을 만들 필요가 없다. 물론 그렇다고 controller가 하나의 controller에 모든 api를 넣지는 않고, 유사한 성격의 api를 하나의 controller로 관리한다.

스프링 mvc 매우 중요.
mvc는 디자인 패턴이다. model, view, controller 디자인 패턴의 줄임말이다.

server에서 html을 내려주는 경우 두가지로 나뉜다.
하나는 정적 웹페이지로 클라이언트가 서버에 요청하면, 서버는 html을 그대로 보내주는 방식이다.
이때 컨트롤러는 클라이언트의 요청을 그대로 모델로 받아서 처리를 한다.
ex) 회원가입을 위한 개인정보들(id, password, name)
그리고 컨트롤러는 클라이언트에게 정적 웹페이지를 내려준다.

두번째는 동적 웹페이지다.
컨트롤러에서 클라이언트의 요청을 똑같이 모델로 받아 처리한다.
그뒤 템플릿 엔진에게 뷰와 모델을 전달한다.
여기서 말하는 뷰는 html을 말하는데 지금은 이중 동적 html을 지금 가리키고 있다.
그리고 지금 말하는 모델은 뷰에 적용할 정보들을 말한다.
이런식으로 뷰(html)에 모델을 적용하면 동적 웹페이지가 생성된다.
ex)로그인 성공시, 로그인된 사용자의 id를 html에 추가해서 클라이언트에 보내주는것.
 
#템플릿 엔진은 지정된 템프릿 양식과 특정 데이터 모델에 따른 입력 자료를 합성하여 결과 문서를 출력하는 소프트웨어를 말한다.
웹 템플릿 엔진은 html과 DB connction을 분리해 주는 기능을 한다.
템플릿 엔진은 타임리프, Groovy, FreeMarker, jade등 다양하나 스프링은 JSP 이용은 추천하지 않는다.
JSP 굉장히 많이 사용하나 스프링에서는 예외.


클라이언트와 서버간 request, respose는 HTTP 메시지 규약을 따른다.
이 규약을 숙지하는건 매우 중요하다.
request는 시작줄에 api 요청 내용이 제일 있어야한다.
헤더부분은 Content Type이 들어갈수도, 안들어갈수도 있다.
HTML <form> 태그로 요청할시 Ctontent type: application/x-www-form-urlencoded 가 들어 가는 식이다.
get 요청시 보통은 바디에 정보 없고, post 요청시 제이슨이나, xml등 형식으로 바디에 값이 들어간다.

response는 처음 줄은 시작줄이 아닌 상태출인데 해당 request의 요청결과 상태를 보내준다.
헤더는 마찬가지로 content type이나 아니면 추가로 location이 들어가기도 한다.
바디에는 html이나 json 형태로 본문 내용이 들어간다.

@ResponseBody 를 api public 위에 붙여주면 return에 html 바디를 직접 넣어줄수 있다.

정적 웹페이지, 동적 웹페이지, JSON 데이터 이 3개중 요즘 JSON을 많이 사용한다.
JSON은 처음 요청때만 html을 내려주고, 그 뒤는 json만 왔다갔다 하는 형식이다.

@Controller와 @ResponseBody를 json을 쓸때마다 넣어주기 불편해서 만들어진것이 @RestController이다.
한번써주면 @ResponseBody를 더이상 안써줘도 된다.
클래스가 스트링 타입으로 들어오면 자동으로 @ResponseBody를 인식해주기에 리턴값에 html을 써넣으면된다.

@PathVariable을 선언해서 주소의 값을 가져오는방법과, @RequestParam을 해서 값을 하나하나 가져오는 방법, @ModelAttribute를 해서 dto 클래스를 가져와 값을 한번에 가져오는 방법이 있다.
@RequestBody는 json 형식으로 값을 가져오는 방법.
그리고 @ModelAttribute를 사용하려면 dto클래스에 @Setter도 꼭 있어야한다.

