Spring Web MVC의 Dispatcher Servlet의 동작 원리
Dispatcher Servlet에 있는 dispatch는 "보내다"라는 뜻을 가진다.
보내다 라는 의미를 포함하고 있는 Dispatcher Servlet 은 HTTP 프로토콜로 들어오는 모든 요청을 가장 먼저 받아 적합한 컨트롤러에 보내주는 Front Controller 이다.
Dispatcher Servlet은 Front Controller로서 클라이언트로 부터 어떠한 요청이 오게 되면 모든 요청을 자신이 먼저 받게 되고, 이러한 요청들을 세부 컨트롤러에게 전달하는 역할을 한다.

동작원리를 설명하자면 먼저 가장 기본적으로 servlet이 호출되면 doService() 메서드가 호출된다.
이때 doService()의 코드를 파헤쳐보면 맨 아래에서 doDispatch() 메서드가 호출된다. 이를통해 실제로 dispatch를 실행하는 과정이 진행된다.

Spring Bean Life Cycle
데이터베이스 커넥션 풀이나, 네트워크 소켓처럼 애플리케이션 시작 시점에 필요한 연결을 미리 해두고, 애플리케이션 종료 시점에 연결을 모두 종료하는 작업을 진행하려면, 객체의 초기화와 종료 작업이 필요하다. 스프링 빈도 위와 같은 원리로 초기화 작업과 종료 작업이 나눠서 진행된다. 간단하게 말하면 객체 생성 -> 의존관계 주입이라는 라이프사이클을 가진다.

filter와 interceptor의 차이
Filter와 Interceptor는 실행되는 시점이 다르다. Filter는 Web Application에 등록을 하고, Interceptor는 Spring의 Context에 등록을 한다.

Filter는 Servlet에서 처리하기 전후를 다룰 수 있다. Interceptor는 Handler를 실행하기전(preHandle), Handler를 실행한 후(postHandle), view를 렌더링한 후(afterCompletion) 등, Servlet내에서도 메서드에 따라 실행 시점을 다르게 가져간다.

