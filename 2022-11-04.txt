state 관리. 리코일, 비동기, 동기, 콜백, 프로미스

자바스크립트 비동기, 동기?
자바 스크립트는 동기식 언어다.
때문에 자바스크립트는 한 번에 하나의 작업만을 수행한다.
한작업을 실행되는 동안 다른 작업은 멈춘 상태를 유지하고 자신의 차례를 기다리는 것을 말한다.
이러한 동작을 싱글 스레드 or 동기라고 부른다.
하지만 이렇게 되면 웹페이지는 하나의 동작이 끝날때 까지 화면에 나타나지 않거나 다음 동작을 수행하는데 지장을 주게 된다.
즉, 웹사이트의 응답이 느려지게 된다.
그렇기때문에 자바 스크립트가 웹 사이트에서 동작할 때, 비동기적으로 동작할 수 있게 만들어줘야 하며 이를 브라우저는 자바스크립트의 실행 환경을 이용해 구현했다.
브라우저는 자바스크립트의 엔진만으로 동작하지 않고, 브라우저에서의 자바스크립트 실행 환경을 통해 자바스크립트 엔진이 제공하지 않는 일부 기능인 DOM 조작이나 AJAX와 같은 비동기 처리를 위한 web API를 제공한다.
또 이를 제어하기 위해 이벤트 루프(Event Loop), 이벤트 큐(Callback Que or task Queue)가 존재한다.

이제 다시 동기와 비동기 동작 원리를 정리하자면 먼저 동기 동작 원리의 경우 아래와 같다.
1. 코드가 실행되면 순서대로 Call Stack에 실행할 함수가 쌓인다.(push)
2. 쌓인 반대 순서로 함수가 실행된다.(LIFO)
3. 실행이 된 함수는 Call Stack에서 제거된다(pop)

비동기 동작 원리
1. call stack 에서 비동기 함수가 호출되면 call stack 에 먼저 쌓였다가 web api로 이동한 후 해당 함수가 등록되고 call stack에서 사라진다.
2.  web api에서 비동기 함수의 이벤트가 발생하면, 해당 콜백 함수는 callback queue에 push된다
3. 이후 call stack이 비어있는지 이벤트 루프가 확인을 하는데 만약 비어있다면, call stack에 callback queue에 있는 콜백함수를 넘겨준다.(push)
4. call stack에 들어온 함수는 실행이 되고, 실행이 끝나면 call stack에서 사라진다.

콜백함수란 뭘까?
콜백이란 프로그래밍에서 다른 코드의 인수로써 넘겨주는 실행가능한 코드를 말한다.
콜백을 넘겨받는 코드는 이 콜백을 필요에 따라 즉시 실행할 수도 나중에 실행 할 수도 있다.

js의 함수는 객체라고 할 수 있다.
그중에서도 1급 객체라고 할 수 있는데 1급 객체의 조건은 다음과 같다.
1. 변수나 데이터 구조안에 담을 수 있따.
2. 객체의 인자로 전달 할 수 있따.
3. 반환값으로 전달할 수 있다.
여기서 함수(객체)의 인자로 넘겨지는 함수를 콜백 함수라고 부른다.

너무 어렵게 생각할게 아니라 콜백함수는 이름 그대로 나중에 호출되는 함수를 말한다고 한다.
콜백함수라해서 그 자체로 특별한 선언이나 문법적 특징을 가지고 있지는 않다.
구조적으로 다를게 없는 일반적인 자바스크립트 함수 중 하나며, 콜백 함수는 코드를 통명시적으로 호출되는 함수가 아니기에 개발자는 단지 함수를 등록 하기만 하고, 어떤 이벤트가 발생했거나 특정 시점에 도달 했을 때 시스템에서 호출하는 함수를 말한다.
즉, 콜백함수는 콜백함수라는 따로 유니크한 문법적 특징을 가지고 있는게 아닌, 단순 호출방식에 의한 구분이다라고 할수 있다.


리액트 컴포넌트에서 다루는 데이터는 두개로 나뉜다고 한다.
바로 props와 state다.
props는 기존에 알고 있던 것 처럼 부모 컴포넌트가 자식 컴포넌트에게 주는 값을 말한다.
자식 컴포넌트에서는 props를 받아오기만 하고, 받아온 prop를 자식 컴포넌트가 직접 수정할 수는 없다.
리액트에서는 부모 -> 자식이라는 일방향성 상속이라는 특징이 존재하기 때문이다.
반면 state는 컴포넌트 내부에서 선언하며 내부에서 값을 변경할 수 있다는 차이가 있다.

