객체 리터럴?
let user = {name: 'sim', age: 28}
이처럼 객체를 생성하는 방법이다.
회원, 상품 등과 같은 객체를 여러개 만들어야 할 때 불편하다.

생성자 함수?
객체의 요소를 전달받아 객체를 생성한다. 보통 첫 글자는 대문자이다.
객체 리터럴보다 빠르고 간편하게 일관성 있는 ㄱㄱ체를 생산할 수 있다. 생성자 함수마 수저하면 수많은 객체를 다르게 만들 수 있다.
예시를 들자면 아래와 같다.

function user(name, age){
this = {};
this.name = name;
this.age = age;
this.sayName = function(){console.log(this.name)}
return this;
}
let user1 = new User('sim', 28);
let user2 = new User('kim', 29);
user1.sayName();

이렇게 new 연산자로 함수를 호출한다.

var, let, const 차이점
var는 변수 선언 방식에 있어서 큰 단점을 가지고 있다.
변수를 한 번 더 선언해도 에러가 나오지 않고 각기 다른 값이 출력되기 때문이다.
이는 유연한 변수 선언으로 간단한 테스트에는 편리 할 수 있겠으나, 코드량이 많아 진다면 어디에서 어떻게 사용 될지도 파악하기 힘들뿐더러 값이 바뀔 우려가 있다.
이를 보완하기 위해 추가 된 변수 선언 방식이 let 과 const 이다.
let과 const로 변수를 선언해주면 var과는 달리 변수 재선언이 되지 않는다.
이런 let과 const도 자세히 파고들어보면 차이점이 ㅈㄴ재한다.
바로 immutable(불변성) 의 여부이다.
const는 변수 재선언, 변수 재할당 모두 불가능하다.
반면 let 은 변수에 재할당이 가능하다.
