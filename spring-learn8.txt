인증(Authentication): 사용자 신원을 확인하는 행위. 회사에 빗대자면 회사 출입을 위해 출입증 확인하거나 지문인식등을 하는 행위.
인가(Authorization): 사용자 권한을 확인하는 행위. 회상에 빗대자면 회사 건물 내 접근 권한을 관리하는 것으로 방문자는 회의실만 접근 가능하고, 직원은 회의실 사무실만, 관리자는 서버실, 물품보관실까지 접근 가능한 식으로 통제한다.

웹에서는 인증은 보통 로그인을 토해 본인임을 확인하고, 인가는 주로 웹페이지내 회원 랭킹이라던지 사이트 관리자라던지 역할에 따라 서로 다른 권한을 부여해주는 식으로 관리하는 것을 말한다.

HTTP는 상태를 저장하지 않는다. 때문에 HTTPS에 비해 상대적으로 보안에 취약하다.
HTTP의 이런 상태를 저장하지 못하는 문제, 즉 상태 정보를 유지하기 위해서는 쿠키와 세션이 필요하다.
이를 통해 클라이언트 별로 별도의 인증과 인가를 해줄수 있게 된다.

쿠키
클라이언트에 저장될 목적으로 생성되는 작은 정보를 담은 파일이다. 만료시점은 설정가능하다.

세션
서버에서 일정시간 동안 클라이언트 상태를 유지하기 위해 사용한다.
클라이언트 별로 '세션 ID' 를 부여한 후 클라이언트 별 필요한 정보를 서버에 저장한다.
마찬가지로 서버에서 생성한 '세션 ID' 는 클라이언트로 넘겨져 클라이언트의 쿠키값('세션 쿠키' 라고 부름)으로 저장되어 클라이언트 식별에 사용된다.
이후 다음 조건 중 하나가 만족될 경우 만료된다.
1. 브라우져 종료 시
2. 클라이언트 로그아웃
3. 서버에 설정한 유지기간까지 해당 클라이언트의 재요청이 없는 경우

스프링 시큐리티 프레임워크는 스프링 서버에 필요한 인증 및 인가를 위해 많은 기능을 제공해 줌으로 개발의 수고를 덜엊ㄴ다.
스프링 프레임워크가 웹서버 구현에 편의를 제공하는 것과 마찬가지로 생각하면 된다.

스프링 시큐리티 프레임워크 적용법.
bulid.gradle 파일의 dependencies 안에
implementation 'org.springframework.boot:spring-boot-starter-security'
를 넣어준다. 
그뒤 코딩창 우측 상단에 나타나는 gradle 아이콘을 클릭하면 적용된다.

스프링 시큐리티 프레임워크 활성화 방법
security 패키지를 만들고 그안에 security 클래스 파일을 만들어 아래의 코드를 붙여넣어준다.
+++
@Configuration //이 파일을 스프링을 시작할때 먼저 실행되는 설정클래스로 하겠다.
@EnableWebSecurity // 스프링 Security 지원을 가능하게 함
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.authorizeRequests()
// 어떤 요청이든 '인증'
                .anyRequest().authenticated()
                .and()
// 로그인 기능 허용
                .formLogin()
                .defaultSuccessUrl("/") //성공하게 되면 "/"로 이동시키겠다.
                .permitAll()//이 기능을 허용해줘라
                .and()
// 로그아웃 기능 허용
                .logout()
                .permitAll();
    }
}
+++

스프링 플레임워크 특징
POJO(Plain Old Java Object) 기반의 구성
스프링은 내부적으로 별도의 API를 사용하지 않고, 일반적인 Java 코드를 이용하여 객체를 구성하는 방식 그대로 사용하고 있다.
때문에 개발자는 특정한 라이브러리나 컨테이너의 기술에 종속적이지 않을수 있다.

#POJO란?
POJO는 말 그대로 해석을 하면 오래된 방식의 간단한 자바 오브젝트라는 말로서 Java EE 등의 중량 프레임워크들을 사용하게 되면서 해당 프레임워크에 종속된 "무거운" 객체를 만들게 된 것에 반발해서 사용되게 된 용어

트랜잭션의 지원
데이터베이스 연동할때 사용할 트래잭션을 만들기 위해 해야할 여러 코딩들을 Annotation이나 XML로 간단히 설정할 수 있도록 지원해준다.

정형화 되어있어서 일정수준의 품질을 기대할 수 있으며, 프레임워크 숙달한 숙달자에 한해 유지보수가 쉽다.

ORM은 웹서버와 DBA의 언어를 번역해주는 역할을 한다.

#생활코딩 관계형 데이터모델링 들어보자.


다시 security 클래스 파일로 돌아와서 로그인 기능 형식 예시
++++
 .and()
// 로그인 기능 허용
                .formLogin()
                .loginPage("/user/login")  //로그인 페이지 도메인 /user/login으로
                .defaultSuccessUrl("/")
                .failureUrl("/user/login?error")  //실패시 //user/login?error 도메인으로
                .permitAll()