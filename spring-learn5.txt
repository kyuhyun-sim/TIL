변수를 어노테이션으로 @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)를 선언해주면 post 타입으로 값을 쓸때만 해당 변수를 가져올수 있다.

동기와 비동기.
동기방식의 경우 동시에 2개의 작업을 수행할수 없다.
안정적이고 프로세서를 더 잡아먹지 않고, 비동기에 비해 코드 작성이 비교적 간편한 편이다.
비동기의경우 동시에 2개 이상의 작업을 수행할수 있다.
이를 비동기 논스톱 방식이라고도 하는데 작업에는 효율적이나 프로세서를 더 잡아 먹을 수 있고 코드를 짜기 까다로운 편이기에 개발하는 앱에 따라 사용 유무를 고려해야한다.
이러한 이유는 계좌 이체 같은 하나의 작업을 수행하는 도중 다른 작업이 끼어들 여지가 있으면 안되는 은행과 관련된 앱의 경우 동기방식을 추천한다고 한다.

jpa 영속성
주소 참고: https://www.notion.so/JPA-30ae4ee83c2a40dab2c04cb8b36a903f
ORM의 한종류 JPA
ORM은 객체와 관계형 데이터베이스를 매핑하는 역할을 해줌.
이 ORM을 통해 SQL문이 아닌 Method를 통해 DB를 조작할 수 있고 데이터베이스의 의존성을 제거(오라클, sql등 데이터베이스 별 문법이 조금씩 다른데 이걸 바꿔줄 필요가 없어저미_
영속석 컨텍스트란?
엔터티를 영구 저장하는 환경으로, 애플리케이션과 데이터베이스 사잉서 객체를보관하는 논리적ㅇ니 개념이다.
특징: 1차 캐쉬, 동일성 보장(따로 다른 변수를 만들어 선언해도 값을 DB에서 가져오기 때문에 동일한 데이터가 불러와짐), 트랜잭션을 지원하는 쓰기 지연(정상적으로 로직 완료되었는지 확인하고 데이터 값을 써넣겠다.), 변경 감지(값이 변경되면 세이브 안되도 자동으로 DB에 저장해줌), 지연 로딩


제네릭이란?
클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법을 의미한다.
ex)
class Person<T>{
public T info;
}
Person<String> p1 = new Person<String>(); //String 로 인스턴스 타입을 지정하는 순간 p1 변수도 String이 된다.
Person<StringBuilder> p2 = new Person<StringBuilder>();//StringBuilder로 인스턴스 타입을 지정하는 순간 p2 변수는 StringBuilder이 된다.


