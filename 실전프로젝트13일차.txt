웹소켓은 HTTP와 같은 프로토콜 통신규약이라고 할 수 있다.
Transport protocol의 일종으로 서버와 클라이언트 간의 효율적인 양방향 통신을 실현하기 위한 구조다.
웹소켓은 단순한 API로 구성되어있으며, 웹소켓을 이용하면 하나의 HTTP 접속으로 양방향 메시지를 자유롭게 주고받을 수 있다.
위 배경에서 웹소켓이 나오기 이전에는 모두 클라이언트의 요청이 없다면, 서버로부터 응답을 받을 수 없는 구조였다고 한다.
웹소켓은 이러한 문제를 해결하는 새로운 약속으로 떠올랐다.
웹소켓에서는 서버와 브라우저 사이에 양방향 소통이 가능하게 해준다.
브라우저는 서버가 직접 보내는 데이터를 받아들일 수 있고, 사용자가 다른 웹사이트로 이동하지 않아도 최신 데이터가 적용된 웹을 볼 수 있게 해준다.
웹페이지를 ‘새로고침’하거나 다른 주소로 이동할 때 덧붙인 부가 정보를 통해서만 새로운 데이터를 제공하는 웹서비스 환경의 기본적인 제약을 풀어주는 역할을 해준다..
웹에서도 채팅이나 게임, 실시간 주식차트와 같은 실시간이 요구되는 응용프로그램의 개발을 한층 효과적으로 구현할 수 있게 되었고, 가상화폐의 분산화 기술의 핵심도 WebSocket으로 구현할 수 있다고 한다.

작동원리
서버와 클라이언트간의 웹소켓 연결을 HTTP프로토콜을 통해 이루어진다.
연결이 정상적으로 이루어진다면 서버와 클라이언트 간에 웹소켓 연결(TCP/IP기반)이 이루어지고 일정 시간이 지나면 HTTP연결은 자동으로 끊어진다.
기본적으로  웹소켓 API는 아주 간단한 기능들만을 제공하기 때문에 대부분의 경우 SockJS나 Socket.IO같은 오픈 소스 라이브러리를 많이 사용하고 있으며 메시지 포맷 또한 STOMP같은 프로토콜을 같이 이용한다고 한다.

문제점
1. 프로그램 구현에 보다 많은 복잡성을 초래한다.
- 웹 소켓은 HTTP와 달리 Stateful protocol이기 때문에 서버와 클라이언트 간의 연결을 항상 유지해야 하며 만약 비정상적으로 연결이 끊어졌을때 적절하게 대응해야 한다. 
이는 기존의 HTTP 사용시와 비교했을때 코딩의 복잡성을 가중시키는 요인이 될 수 있다.

2. 서버와 클라이언트 간의 Socket 연결을 유지하는 것 자체가 비용이 든다.
- 특히나 트래픽 양이 많은 서버같은 경우에는 CPU에 큰 부담이 될 수 있다.
3. 오래된 버전의 웹 브라우저에서는 지원하지 않는다.
(물론 SockJS 라이브러리 같은 경우에는 Fallback option을 제공하고 있다.)

웹소켓 방식과 이전 폴링, 롱폴링을 비교한 방식들의 차이와 성능 비교
참조: https://valuefactory.tistory.com/263

Polling 폴링방식
클라이언트가 n초 간격으로 request를 서버로 계속 날려서 response를 전달받는 방식이다. HTTP는 단발성 통신이기때문에 header가 매우 무거운 프로토콜 중 하나로 이 프로토콜이 계속해서 request를 날리면 서버의 부담이 증가한다. 그렇다고 초 간격을 늘린다면 실시간성이라고 볼 수 있을까?하는 의문에 빠진다.

Long Polling 롱폴링방식
HTTP로 일단 request를 보내놓고 timeout날 때까지 기다리다 중간에 보낼 데이터가 있다면 response를 보내주는 방식이다. 그럼 클라이언트는 곧바로 다시 HTTP request를 보내놓고 또 기다린다. 일반 polling 방식보다는 서버의 부담이 줄겠지만 데이터 업데이트가 빈번해진다면 일반 polling방식과 큰 차이가 없다.


WebSocket
웹소켓은 클라이언트와 서버가 양방향 통신을 하는 방식으로 실시간 통신이 가능하다.
웹소켓을 사용하기 위해서는 WS라는 프로토콜을 이용한다. WS 프로토콜을 사용하기 위해서는 HTTP에서 Websocket으로의 프로토콜 전환(WebSocket HandShake)을 거쳐야한다.

FCM
무료로 이용할수 있는 서비스로, 개발이 관편하고 트래픽 관리 안해도 된다.
문제는 Push API, Service Worker API 를 지원하는 브라우저에서만 사용 가능하다.
즉 mac 사파리, iOS 사파리에서 fcm, IE등의 브라우저에서는 사용이 안된다.

*우리가 개발할 웹은 pc로 접속가능한 웹이라기 보다, PWA를 통한 웹앱 구현이 핵심이며, 이 PWA는 Service Woker API를 지원해준다.
상대적으로 낮은 개발 난이도와 트래픽 관리를 안해도 된다는 간편함에 WebSocket 보다는 FCM을 사용하는것이 좋아 보인다.

웹소켓
stomp 사용해보기
stomp는 통신규약중 하나이다.
