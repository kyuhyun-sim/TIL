WAS와 WS의 차이
둘의 가장 큰 차이점은 "동적인 컨텐츠를 다룰 수 있는가?"이다.
웹서버는 처리할 수 있는 데이터가 html, css, 이미지 등 정적인 데이터로 한정된다. 
웹 어플리케이션에서 정적인 데이터가 아닌 동적인 컨텐츠까지도 쓰고싶을때 이러한 욕구를 충족시켜주는게 바로 웹 어플리케이션 서버다. 
웹 어플리케이션 서버는 웹 서버에 웹 컨테이너를 붙인 형태이다.

WAS를 사용해서 클라이언트가 서버로부터 데이터를 받는 방식은 다음과 같다.
클라이언트가 웹 서버에 데이터를 요청한다. 
웹 서버에서는 동적 컨텐츠인지를 확인한다. 
동적 컨텐츠라면 웹 컨테이너로 전송한다.
정적 컨텐츠라면 클라이언트에게 데이터를 전송한다. 
동적 컨텐츠를 전송받은 웹 컨테이너는 Servelet 구동환경을 제공한다.
제공받은 환경에서 동적 컨텐츠를 생성하고 이를 웹서버에 넘겨준다. 
넘겨받은 동적 컨텐츠를 클라이언트에게 전송해준다.

Call By Value와 Call By Reference 차이
Call by value(값에 의한 호출)는 인자로 받은 값을 복사하여 처리를 한다. Call by reference(참조에 의한 호출)는 인자로 받은 값의 주소를 참조하여 직접 값에 영향을 준다. 간단히 말해 값을 복사를 하여 처리를 하느냐, 아니면 직접 참조를 하느냐 차이다.

http VS 웹소켓 차이?
HTTP는 Client의 요청(Request)이 있을 때만 서버가 응답(Response)하여 해당 정보를 전송하고 곧바로 연결을 종료하는 방식이다.

반면 웹소켓의 경우 Server와 Client가 특정 Port를 통해 실시간으로 양방향 통신을 하는 방식이다.

HATEOAS
REST Api를 사용하는 클라이언트가 전적으로 서버와 동적인 상호작용이 가능하도록 하는 것을 의미한다. 
이러한 방법은 클라이언트가 서버로부터 어떠한 요청을 할 때, 요청에 필요한 URI를 응답에 포함시켜 반환하는 것으로 가능하게 할 수 있다.

가비지컬렉터
자바에서는 메모리를 GC라는 알고리즘을 통하여 관리(automatic memory management)하기 때문에, 개발자가 메모리를 처리하기 위한 로직을 만들 필요가 없고, 절대로 만들어서는 안된다.
Garbage Collection. 자바에서 쓰레기는 객체라 볼수 있다. 
하나의 객체는 메모리를 점유하고, 필요하지 않으면 메모리에서 해제되어야 한다. 
a라는 객체가 만들어져 메모리의 한부분을 점유하게 되고, 특정 메소드 호출한 후 수행이 완료되어 해당 객체가 더이상 필요없는 객체, 쓰레기가 된다면. 이 쓰레기 객체를 효과적으로 처리하는 작업을 GC라고 한다.