++문제풀이 애먹은거++
import java.util.Arrays;
class Solution {
    public int[] solution(int[] arr, int divisor) {
        
        int result = 0;
        int total = 0;
        int count = 0;

        for(int i = 0; i < arr.length; i++){
            if(arr[i] % divisor == 0){
                total += 1;
            }
        }
        int[] answer = new int[total];
        
        for(int i = 0; i < arr.length; i++){
            if(arr[i] % divisor == 0){
                answer[count] = arr[i];
                count += 1;
            }
        }
        
        Arrays.sort(answer);
        
        if(answer.length == 0){
            answer = new int[]{-1};
        }


        return answer;
    }
}
++++

Arrays.sort(answer) -> 배열 answer를 오름차순 정렬한다.


에러:  컴퓨터나 jvm이 시스템적으로 동작할수 없을때 발생.
OOM(out of memory error: 할당 받을 수 있는 최대 메모리 이상을 사용하면 jvm은 저장할 공간이 사라져 죽어버림. 이때 발생하는 에러
예외: 대부분 프로그램이 죽지않고 계속 돌아야 하는 상황에 사용.
RuntimeException: 실행 중에 발생하는 에러.
IOException: 파일이나 네트워크 데이터를 읽고 쓸때 발생하는 예외.

예외처리 try-catch-finally문
try{//오류가 예상되는 코드를 적는다} catch(//exception e 등  예상되는 발생 에러들을 적는다){//예상되는 발생 에러를 잡았을시 실행할 코드를 적는다} finally{//예외 발생여부와 상관없이 항상 수행되어야하는 코드를 구현한다.}

try-with-resource
try(//에러 발생시 반납할 리소스 코드){//에러 발생시 코드}catch(//exception e 등  예상되는 발생 에러들){//예상되는 발생 에러를 잡았을시 실행할 코드를 적는다}

메소드에서 예외 처리시 catch문을 이용하여 예외처리를 하지 않는 경우에는 throws로 예외 발생을 알려줘야한다. 
Date, Time, DateTime 각각 날짜, 시간, 날짜와 시간을 불러오는 방법을 배웠다.
LocalDate date = LocalDate.now(); //현재 날짜
LocalTime time = LocalTime.now(); // 현재 시간
LocalDateTime dateTime = LocalDateTime.now();// 현재 날짜와 시간

formatter로 표현 형식 변경도 가능하다.
period.between 쓰면 시작 일과, 종료일 설정해서 그 사이 기간을 알수 있다.


오늘은 알고리즘 기초문제 풀이들을 위주로 하였기에 많은 진도를 나가지는 못했지만 알고리즘 기초문제들을 고민하며 하나씩 풀어나가며 아직 익숙하지 못한 java 문법들에 익숙해 지는 것을 느꼈다.