객체지향
객체 지향 프로그래밍은 컴퓨터 프로그래밍 패러다임 중 하나로, 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다.

장점 
▶코드 재사용이 용이 남이 만든 클래스를 가져와서 이용할 수 있고 상속을 통해 확장해서 사용할 수 있다. 
▶유지보수가 쉬움 절차 지향 프로그래밍에서는 코드를 수정해야할 때 일일이 찾아 수정해야하는 반면 객체 지향 프로그래밍에서는 수정해야 할 부분이 클래스 내부에 멤버 변수혹은 메서드로 존재하기 때문에 해당 부분만 수정하면 된다. 
▶대형 프로젝트에 적합 클래스 단위로 모듈화시켜서 개발할 수 있으므로 대형 프로젝트처럼 여러 명, 여러 회사에서 프로젝트를 개발할 때 업무 분담하기 쉽다. - 단점 
▶처리 속도가 상대적으로 느림 
▶객체가 많으면 용량이 커질 수 있음 
▶설계시 많은 시간과 노력이 필요


DI?
의존관계를 내부가 아닌 외부에서 결정하고 주입하는 것이 DI(의존관계 주입)이다.

IoC 컨테이너의 역할
컨테이너는 객체의 생명 사이클을 관리하고, 생성된 인스턴스들에게 추가적인 기능을 제공하도록 하는 것이다.
IoC 컨테이너는 스프링 프레임워크에서 이와 같은 역할을 한다.
또한 POJO의 생성, 초기화, 서비스, 소멸에 관한 권한을 가지고 있어 개발자들은 IoC 컨테이너에게 이를 맡기고 비즈니스 로직에 집중할 수 있다.

JWT
JSON 포맷을 통해서 데이터를 저장하는 웹 토큰이다. JWT는 사용자 인증의 과정에서 보편적으로 사용되는 토큰이다. 토큰 자체에 정보가 저장되는 Self-Contained 라는 특성을 가진다.

OAuth
OAuth는 인증을 위한 개방형 표준 프로토콜이다. 이 프로토콜에서는 Third-Party 프로그램에게 리소스 소유자를 대신하여 리소스 서버에서 제공하는 자원에 대한 접근 권한을 위임하는 방식을 제공한다.

JWT와 OAuth의 차이
CORS는 한 도메인 또는 Origin의 웹 페이지가 다른 도메인 (도메인 간 요청)을 가진 리소스에 액세스 할 수 있게하는 보안 메커니즘이다. 
CORS는 서버와 클라이언트가 정해진 헤더를 통해 서로 요청이나 응답에 반응할지 결정하는 방식으로 CORS라는 이름으로 표준화 되었다. 
CORS는 최신 브라우저에서 구현된 동일 출처 정책(same-origin policy) 때문에 등장했다.

여기서 말하는 동일 출처 정책이란 동일한 출처의 리소스에만 접근하도록 제한하는 것이다. 여기서 출처는 프로토콜, 호스트명, 포트가 같다는 것을 의미한다.

프론트 엔드와 협업하며 이 CORS문제가 발생하였는데 이때 webconfiguration을 만들어 프론트 엔드 출처를 명시해 CORS 문제를 해결하였다.

인스턴스화
클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화(instantiate)라고 한다. 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스(instance)라고 한다.

제네릭
제네릭(Generic)은 클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 지정되는 것을 의미한다.

어노테이션?
Annotation은 프로그램 내에서 주석과 유사하게, 프로그래밍 언어에는 영향을 미치지 않으면서 프로그램/프로그래머에게 유의미한 정보를 제공하는 역할을 한다. 즉, 이 속성을 어떤 용도로 사용할지, 이 클래스에 어떤 역할을 부여할지를 결정해준다.
